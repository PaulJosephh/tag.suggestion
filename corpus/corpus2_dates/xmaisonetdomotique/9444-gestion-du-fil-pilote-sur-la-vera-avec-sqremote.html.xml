<document>
	<date>2012-02-16</date>
        <title>
Gestion du fil pilote sur la Vera avec SQRemote</title>
        <author>algeroth</author>
        <tags_set>
                <tag>chauffage</tag>
                <tag>SQDesigner</tag>
                <tag>SQRemote</tag>
                <tag>vera</tag>
        </tags_set>
        <categories_set>
                <category>Guides Chauffage</category>
        </categories_set>
        <text>Nous avons vu hier  comment domotiser un radiateur a laide dun module Zwave , et son integration sur la box  eedomus . Pour rappel cette solution consiste a utiliser un module Z-Wave FIBARO Double Switch. Celui-ci est connecte au fil pilote via 2 diodes tete beche. Ainsi avec ces deux interrupteurs ont peut simuler les 4 ordres principaux dun fil pilote. Nous allons voir aujourdhui comment utiliser ce montage sur la  Vera . La difficulte maintenant est de pouvoir piloter ces radiateurs et donc le double interrupteur du FIBARO. Aucun module nexiste sur la  VERA , et aucun sur  SQRemote . Deux solutions: Realiser chaque commande (Confort/Eco/Hors gel/Off) a laide de scenarios. Gros inconvenient, on ne sait pas dans quel mode est le radiateur, en effet le bouton de scenario ne fait quactiver des commandes Cette solution nest pas ideale. Developper un module expres pour radiateur a fil pilote sur la  VERA  et sur SQRemote. Cest donc cette deuxieme solution qui sera utilisee. La creation du module sur la  VERA  est lie a lelement sur SQRemote qui va le piloter. Etant donne quil nen nexiste pas, il faut donc en creer un. Pour faciliter les choses il faut trouver dans SQRemote un element qui pourrait servir a la commande dun radiateur. Celui le plus approprie est un element qui commande un ventilateur. Pourquoi? Car il dispose de 4 boutons, qui peuvent correspondre aux 4 ordres de fil pilote, et une esthetique qui peut sadapter a la commande dun radiateur. Cet element commande un module dimmable sur la  VERA . Les 4 boutons correspondent a un pourcentage du dimmable 0% 33% 66% 100%. Il faudra faire correspondre ces 4 pourcentages avec les 4 ordres. Ce module sera modifie plus tard pour correspondre a la commande du radiateur.  
 I. Pre requis sur la Vera  Maintenant quon sait que la commande se fera via un module dimmable sur la  VERA , il faudra donc creer un module dimmable perso, sur la  VERA . Ceci est permis sur la VERA grace au Device Virtuel. Un device virtuel, est un module Z-wave qui nexiste pas physiquement. Pour le creer il faut ecrire deux fichiers types au format XML, ici ce sera D_Radiateur1.xml et I_Radiateur1.xml. Pour chaque radiateur, il faudra creer un device virtuel.  
 1. Fichier D_Radiateur1.xml  Le premier est le fichier type dun device virtuel dans lequel on utilise le fichier Json dun module dimmable classique D_DimmableLight1.json ainsi que S_Dimming1.xml. Il y a egalement le lien avec le deuxieme fichier que lon va creer I_Radiateur1.xml. Les lignes importantes:  deviceTypeurn:schemas-upnp-org:device:DimmableLight:1/deviceType staticJsonD_DimmableLight1.json/staticJson serviceTypeurn:schemas-upnp-org:service:Dimming:1/serviceType serviceIdurn:upnp-org:serviceId:Dimming1/serviceId controlURL/upnp/control/Dimming1/controlURL eventSubURL/upnp/event/Dimming1/eventSubURL SCPDURLS_Dimming1.xml/SCPDURL implementationFileI_Radiateur1.xml/implementationFile  Voici le fichier D_Radiateur1.xml :  ?xml version=1.0? root xmlns=urn:schemas-upnp-org:device-1-0 specVersion major1/major minor0/minor /specVersion device deviceTypeurn:schemas-upnp-org:device:DimmableLight:1/deviceType staticJsonD_DimmableLight1.json/staticJson friendlyNameRadiateur/friendlyName manufacturerAlgeroth/manufacturer manufacturerURLhttp://ma-maison-domotique.blogspot.com/manufacturerURL modelDescriptionRadiateur/modelDescription modelNameRadiateur/modelName modelNumber1.0/modelNumber protocolcr/protocol handleChildren0/handleChildren UDNuuid:upnp-algeroth-1_0-0000000001020/UDN UPC000001020/UPC serviceList service serviceTypeurn:schemas-upnp-org:service:Dimming:1/serviceType serviceIdurn:upnp-org:serviceId:Dimming1/serviceId controlURL/upnp/control/Dimming1/controlURL eventSubURL/upnp/event/Dimming1/eventSubURL SCPDURLS_Dimming1.xml/SCPDURL /service /serviceList implementationList implementationFileI_Radiateur1.xml/implementationFile /implementationList /device /root  
 2. Fichier I_Radiateur1.xml  Le fichier I_Radiateur1.xml va etre utilise pour programmer le device virtuel. La programmation se fait grace au langage LUUP de la VERA, utilisant le moteur dinterpretation LUA. La premiere fonction de ce fichier, est une fonction de base dun module dimmable, qui permet en fonction du dimmer, de savoir si lelement est sur ON ou OFF, et inversement deteindre et dallumer lelement. Ceci sera tres utile pour la suite, car une fonction de base du dimmer dans la VERA est de conserver son ancien etat lorsquon le rallume. Voici son code:  luup.variable_set (urn:upnp-org:serviceId:Dimming1, LoadLevelTarget, lul_settings.newLoadlevelTarget, lul_device) luup.variable_set (urn:upnp-org:serviceId:Dimming1, LoadLevelStatus, lul_settings.newLoadlevelTarget, lul_device) if (tonumber (lul_settings.newLoadlevelTarget, 10) == 0) then luup.variable_set (urn:upnp-org:serviceId:SwitchPower1, Status, 0, lul_device) else luup.variable_set (urn:upnp-org:serviceId:SwitchPower1, Status, 1, lul_device) end  Explication : luup.variable_set permet de definir une variable, ici un element type Dimming1, il sagit dun niveau quon met a jour avec la valeur du dimmer, et cette valeur est pour son propre device lul_device. Ensuite en fonction de la valeur, si cest different de 0, on considere que lelement est sur ON sinon sur OFF. La deuxieme partie du code permet de piloter les deux interrupteurs des modules FIBARO double switch. En fonction du pourcentage du dimmer, on ferme ou on ouvre un des deux interrupteurs FIBARO. Voici le code:  if (tonumber(lul_settings.newLoadlevelTarget, 10) == 0) then luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 0}, 33) luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 1}, 34) end if (tonumber(lul_settings.newLoadlevelTarget, 10) == 33) then luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 1}, 33) luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 0}, 34) end if (tonumber(lul_settings.newLoadlevelTarget, 10) == 66) then luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 1}, 33) luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 1}, 34) end if (tonumber(lul_settings.newLoadlevelTarget, 10) == 100) then luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 0}, 33) luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 0}, 34) end  Explication : En fonction des 4 pourcentages definis precedemment avec lelement SQRemote (0% 33% 66% 100%) on agit a laide de la fonction luup.call_action sur un device de type SwitchPower1 en le fermant ou louvrant (1/0). Le 33 et 34 correspond a lID des interrupteurs FIBARO a commander. Voici le fichier I_Radiateur1.xml :  ?xml version=1.0? implementation functions function virtual_dimmable_light_startup (lul_device) luup.log (Virtual dimmable light running) end /functions startupvirtual_dimmable_light_startup/startup actionList action serviceIdurn:upnp-org:serviceId:Dimming1/serviceId nameSetLoadLevelTarget/name job luup.variable_set (urn:upnp-org:serviceId:Dimming1, LoadLevelTarget, lul_settings.newLoadlevelTarget, lul_device) luup.variable_set (urn:upnp-org:serviceId:Dimming1, LoadLevelStatus, lul_settings.newLoadlevelTarget, lul_device) if (tonumber (lul_settings.newLoadlevelTarget, 10) == 0) then luup.variable_set (urn:upnp-org:serviceId:SwitchPower1, Status, 0, lul_device) else luup.variable_set (urn:upnp-org:serviceId:SwitchPower1, Status, 1, lul_device) end if (tonumber(lul_settings.newLoadlevelTarget, 10) == 0) then luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 0}, 33) luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 1}, 34) end if (tonumber(lul_settings.newLoadlevelTarget, 10) == 33) then luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 1}, 33) luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 0}, 34) end if (tonumber(lul_settings.newLoadlevelTarget, 10) == 66) then luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 1}, 33) luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 1}, 34) end if (tonumber(lul_settings.newLoadlevelTarget, 10) == 100) then luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 0}, 33) luup.call_action(urn:upnp-org:serviceId:SwitchPower1, SetTarget, {newTargetValue = 0}, 34) end return 4, 5 /job /action /actionList /implementation  Il faudra une paire de fichiers par radiateur, en modifiant juste lID des interrupteurs FIBARO associes au radiateur.  
 II. Configuration sur la VERA  Une fois ces deux fichiers crees, il faut les ajouter a la base de fichiers LUUP. Pour cela il suffit de se rendre dans : APPS-Developper des applications-Fichiers LUUP. On arrive sur cette page:   Ensuite dans les champs Envoyer les fichiers, on ajoute les deux fichiers XML. On coche Redemarrer Luup puis sur GO. Cette etape est a renouveler pour chaque radiateur. Pour finir il faut creer un device virtuel a partir de ces fichiers en allant sur Creer un module.   On rentre le nom que lon veut donner au module dans Description. Dans Nom peripherique UPnP on met le nom du fichier D_Radiateur1.xml puis on selectionne la piece. On clique sur Creer module et on doit obtenir ceci :   Il suffit de faire varier la luminosite ou deteindre et dallumer (0% 100%) pour voir les deux interrupteurs FIBARO se fermer et souvrir. Cest fini pour la partie VERA.  
 III. Sur SQRemote/SQDesigner  Pour la partie SQRemote, il est necessaire davoir le logiciel  SQDesigner  car tout se passe dessus. Comme il est dit precedemment lelement SQRemote utilise en exemple pour la creation dun element pour radiateur est un controle de ventilateur, le High/Med/Low Vertical.   Cest celui-ci qui va etre modifie pour creer lelement radiateur. Pour cela, il va falloir editer les fichiers XML de configuration du logiciel SQDesigner. Trois fichiers vont etre modifies dans SQDesigner/assets/xml, SQControlsList.xml, SQVeraDeviceTypeMapping.xml, et SQGlobalControlPanels.xml. Pensez a faire une sauvegarde des vos fichiers xml initiaux! Etant donne quils sont proteges en ecriture, il faut les copier dans un autre repertoire avant de les modifier pour les recopier ensuite.  
 1. Dans SQControlsList.xml  Il faut aller dans :  type label=Fan Controls  Puis ajouter la ligne :  control label=Radiateur global_panel=true dragItem=true icon=preset_ListIcon dragIcon=default65x255_DragProxy dragIcon_width=65 dragIcon_height=225/ 
 2. Dans SQVeraDeviceTypeMapping.xml  Dans :  device_type name=Fan Controls left_image=MiosMCV.png list_image=ListMiosFanControls.png description=Ceiling fan control  Ajouter la ligne :  control name=Radiateur/ 
 3. Dans SQGlobalControlPanels.xml  Il faut trouver le groupe delements :   Ensuite il suffit de recopier lelement correspondant au High/Med/Low Vertical et modifier les intitules des boutons avec CONF/ECO/H.G/OFF pour le radiateur, il faut egalement modifier le nom de lobjet en Radiateur. Voici la partie de code a rajouter entre les autres elements:  global_view name=Radiateur device_category=5 imageName=fanLowMedHighVert.png description=Radiateur fixedXY=false fixedX=3 fixedY=3 width=65 height=225 drawBorder=false label name=Label title=Radiateur z_position=1 rectangle x=-57 y=0 width=180 height=20/ datasource name=MCVDevice datasource_parameter name=deviceNumber value=/datasource_parameter name=property value=name/ /datasourcelabel_model_state state=default size=16 color=white title=Radiateur alignment=center/ /label button name=FanHigh class_name=SQUIActionButton title= normal_background_icon=jpm_btn65x48.png highlighted_background_icon=jpm_btn65x48Pressed.png foreground_icon= show_touch=false z_position=0 rectangle x=0 y=26 width=65 height=48/ command_mapping device_key=MCV command_name=SetLoadLevelTarget action_parameter name=deviceNumber value=/action_parameter name=serviceName value=Dimming1/action_parameter name=variableName value=LoadLevelStatus/action_parameter name=operation value=100/ /command_mapping /button label name=HighLabel title=CONF z_position=2 rectangle x=0 y=41 width=65 height=16/ datasource name=MCV datasource_parameter name=deviceNumber value=/datasource_parameter name=serviceName value=Dimming1/datasource_parameter name=variableName value=LoadLevelStatus/ /datasource label_model_state state=100 size=14 color=green title=CONF alignment=center isTarget=true provisionalColor=yellow/ label_model_state state=66 size=14 color=gray title=CONF alignment=center/ label_model_state state=33 size=14 color=gray title=CONF alignment=center/ label_model_state state=0 size=14 color=gray title=CONF alignment=center/ label_model_state state=default size=14 color=gray title=CONF alignment=center/ /label button name=FanMed class_name=SQUIActionButton title= normal_background_icon=jpm_btn65x48.png highlighted_background_icon=jpm_btn65x48Pressed.png foreground_icon= show_touch=false z_position=0 rectangle x=0 y=76 width=65 height=48/ command_mapping device_key=MCV command_name=SetLoadLevelTarget action_parameter name=deviceNumber value=/action_parameter name=serviceName value=Dimming1/action_parameter name=variableName value=LoadLevelStatus/action_parameter name=operation value=66/ /command_mapping /button label name=MedLabel title=ECO z_position=2 rectangle x=0 y=91 width=65 height=16/ datasource name=MCV datasource_parameter name=deviceNumber value=/datasource_parameter name=serviceName value=Dimming1/datasource_parameter name=variableName value=LoadLevelStatus/ /datasource label_model_state state=100 size=14 color=gray title=ECO alignment=center/ label_model_state state=66 size=14 color=green title=ECO alignment=center isTarget=true provisionalColor=yellow/ label_model_state state=33 size=14 color=gray title=ECO alignment=center/ label_model_state state=0 size=14 color=gray title=ECO alignment=center/ label_model_state state=default size=14 color=gray title=ECO alignment=center/ /label button name=FanLow class_name=SQUIActionButton title= normal_background_icon=jpm_btn65x48.png highlighted_background_icon=jpm_btn65x48Pressed.png foreground_icon= show_touch=false z_position=0 rectangle x=0 y=126 width=65 height=48/ command_mapping device_key=MCV command_name=SetLoadLevelTarget action_parameter name=deviceNumber value=/action_parameter name=serviceName value=Dimming1/action_parameter name=variableName value=LoadLevelStatus/action_parameter name=operation value=33/ /command_mapping /button label name=LowLabel title=H.G z_position=2 rectangle x=0 y=141 width=65 height=16/ datasource name=MCV datasource_parameter name=deviceNumber value=/datasource_parameter name=serviceName value=Dimming1/datasource_parameter name=variableName value=LoadLevelStatus/ /datasource label_model_state state=100 size=14 color=gray title=H.G alignment=center/ label_model_state state=66 size=14 color=gray title=H.G alignment=center/ label_model_state state=33 size=14 color=green title=H.G alignment=center isTarget=true provisionalColor=yellow/ label_model_state state=0 size=14 color=gray title=H.G alignment=center/ label_model_state state=default size=14 color=gray title=H.G alignment=center/ /label button name=FanOFF class_name=SQUIActionButton title= normal_background_icon=jpm_btn65x48.png highlighted_background_icon=jpm_btn65x48Pressed.png foreground_icon= show_touch=false z_position=0 rectangle x=0 y=176 width=65 height=48/ command_mapping device_key=MCV command_name=SetLoadLevelTarget action_parameter name=deviceNumber value=/action_parameter name=serviceName value=Dimming1/action_parameter name=variableName value=LoadLevelStatus/action_parameter name=operation value=0/ /command_mapping /button label name=OFFLabel title=OFF z_position=2 rectangle x=0 y=191 width=65 height=16/ datasource name=MCV datasource_parameter name=deviceNumber value=/datasource_parameter name=serviceName value=Dimming1/datasource_parameter name=variableName value=LoadLevelStatus/ /datasource label_model_state state=100 size=14 color=gray title=OFF alignment=center/ label_model_state state=66 size=14 color=gray title=OFF alignment=center/ label_model_state state=33 size=14 color=gray title=OFF alignment=center/ label_model_state state=0 size=14 color=green title=OFF alignment=center isTarget=true provisionalColor=yellow/ label_model_state state=default size=14 color=green title=OFF alignment=center/ /label /global_view  Lorsquon demarre SQDesigner on obtient un nouvel element pret a etre utilise. Il pourra etre utilise pour tous les radiateurs. Il suffira de les assigner chacun a un device virtuel cree precedemment.   Au final, voici un exemple dinterface SQRemote permettant de piloter ses radiateurs, sans avoir a se soucier de letat des relais du module Fibaro:   Et tout cela avec la remontee detat, bien sur ! :D   chauffage   SQDesigner   SQRemote   vera 
        </text>
</document>
